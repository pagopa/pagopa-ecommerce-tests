{
	"info": {
		"_postman_id": "ac7acfe9-a435-408c-b5ee-9b6795c53fcf",
		"name": "eCommerce for IO V2 (pay guest)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23305473"
	},
	"item": [
		{
			"name": "Start new eCommerce session transaction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[ecommerce for IO - APM Guest] - Start session\", function () {",
							"  pm.response.to.have.status(201);",
							"  const responseJson = pm.response.json();",
							"  pm.environment.set(\"SESSION_TOKEN\", responseJson.token);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{WALLET_TOKEN_TEST}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{HOSTNAME}}/session-wallet/v1/session",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"session-wallet",
						"v1",
						"session"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payment Info by rptId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[ecommerce for IO - APM Guest] - GET payment info by RPT id\", () => {",
							"  pm.response.to.have.status(200);",
							"  const responseJson = pm.response.json();",
							"  pm.environment.set(\"PAYMENT_TOKEN\", responseJson.paymentContextCode);",
							"  pm.environment.set(\"RPTID_NM3\", responseJson.rptId);",
							"  pm.environment.set(\"AMOUNT\", responseJson.amount);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"RPTID_NM3\", \"77777777777\"+_.random(302001000000000000, 302001999999999999));",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{SESSION_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{HOSTNAME}}/ecommerce/io/v2/payment-requests/{{RPTID_NM3}}",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"ecommerce",
						"io",
						"v2",
						"payment-requests",
						"{{RPTID_NM3}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all payment methods",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[ecommerce for IO - APM Guest] - Get payment method\", function () {",
							"  pm.response.to.have.status(200);",
							"  const responseJson = pm.response.json();",
							"  let searchedPaymentMethodName = pm.environment.get(\"PAYMENT_METHOD_NAME\");",
							"  let paymentMethod = responseJson.paymentMethods.filter(p => p.name === searchedPaymentMethodName)[0];",
							"  if(paymentMethod) {",
							"    pm.environment.set(\"PAYMENT_METHOD_ID\", paymentMethod.id);",
							"    console.log(`Selected payment method: ${paymentMethod.name}`);",
							"  } else {",
							"    throw Error(`No payment method found for name ${searchedPaymentMethodName}`);",
							"  }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							" "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{SESSION_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/ecommerce/io/v2/payment-methods",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"ecommerce",
						"io",
						"v2",
						"payment-methods"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start new eCommerce transaction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[ecommerce for IO - APM Guest] - Activate ecommerce transaction\", () => {",
							"  pm.response.to.have.status(200);",
							"  const responseJson = pm.response.json();",
							"  pm.environment.set(\"TRANSACTION_ID\", responseJson.transactionId);",
							" });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{SESSION_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"paymentNotices\": [{\n        \"rptId\": \"{{RPTID_NM3}}\",\n        \"amount\": {{AMOUNT}}\n    }]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/ecommerce/io/v2/transactions",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"ecommerce",
						"io",
						"v2",
						"transactions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get eCommerce transaction by TRANSACTION_ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[ecommerce for IO - APM Guest] - Get eCommerce transaction\", function () {",
							"  pm.response.to.have.status(200);",
							"  const responseJson = pm.response.json();",
							"  pm.expect(responseJson.status).to.equals(\"ACTIVATED\");",
							"  pm.environment.set(\"PAYMENT_TOKEN\", responseJson.payments[0].paymentToken);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{SESSION_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOSTNAME}}/ecommerce/io/v2/transactions/{{TRANSACTION_ID}}",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"ecommerce",
						"io",
						"v2",
						"transactions",
						"{{TRANSACTION_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get fees by amount and paymentMethodId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[ecommerce for IO - APM Guest] - Get fees by walletId and paymentToken\", function () {",
							"  pm.response.to.have.status(200);",
							"  const responseJson = pm.response.json();",
							"  pm.environment.set(\"ID_PSP\", responseJson.bundles[0].idPsp);",
							"  pm.environment.set(\"FEE\", responseJson.bundles[0].taxPayerFee);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							" "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{SESSION_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"language\": \"it\",\n    \"paymentAmount\": {{AMOUNT}},\n    \"primaryCreditorInstitution\": \"77777777777\",\n    \"isAllCCP\": true,\n    \"transferList\": [\n        {\n            \"creditorInstitution\": \"77777777777\",\n            \"digitalStamp\": false,\n            \"transferCategory\": \"77777777777\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/ecommerce/io/v2/payment-methods/{{PAYMENT_METHOD_ID}}/fees",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"ecommerce",
						"io",
						"v2",
						"payment-methods",
						"{{PAYMENT_METHOD_ID}}",
						"fees"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start new auth request by transactionId and walletId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[ecommerce for IO - APM Guest] - Authorization request\", function () {",
							"  pm.response.to.have.status(200);",
							"  const responseJson = pm.response.json();",
							"  pm.environment.set(\"AUTHORIZATION_URL\", responseJson.authorizationUrl);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{SESSION_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": {{AMOUNT}},\n    \"fee\": {{FEE}},\n    \"pspId\": \"{{ID_PSP}}\",\n    \"language\": \"IT\",\n    \"isAllCCP\": true,\n    \"details\": {\n        \"detailType\": \"apm\",\n        \"paymentMethodId\": \"{{PAYMENT_METHOD_ID}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOSTNAME}}/ecommerce/io/v2/transactions/{{TRANSACTION_ID}}/auth-requests",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"ecommerce",
						"io",
						"v2",
						"transactions",
						"{{TRANSACTION_ID}}",
						"auth-requests"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get eCommerce transaction by TRANSACTION_ID webview polling Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[ecommerce for IO - Wallet Payment] - GET transaction to check status\", () => {",
							"  pm.response.to.have.status(200);",
							"  const responseJson = pm.response.json();",
							"  pm.expect(responseJson.status).to.equals(\"AUTHORIZATION_REQUESTED\");",
							"  pm.environment.set(\"PAYMENT_TOKEN\", responseJson.payments[0].paymentToken);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{SESSION_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOSTNAME}}/ecommerce/webview/v1/transactions/{{TRANSACTION_ID}}",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"ecommerce",
						"webview",
						"v1",
						"transactions",
						"{{TRANSACTION_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Transaction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[ecommerce for IO - Wallet Payment] - Delete transaction\", () => {",
							"  pm.response.to.have.status(202);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"RPTID_NM3_DELETE\", \"77777777777\"+_.random(302001000000000000, 302001999999999999));",
							"",
							"const startSessionObject = {",
							"  url: pm.environment.get(\"HOSTNAME\") + \"/session-wallet/v1/session\",",
							"  method: 'POST',",
							"  header: {",
							"    'Authorization': `Bearer ${pm.environment.get(\"WALLET_TOKEN_TEST\")}`",
							"  }",
							"};",
							"",
							"pm.sendRequest(startSessionObject, (error, response) => {",
							"  if (error) {",
							"    throw error;",
							"  } else {",
							"    const responseJson = response.json();",
							"    pm.environment.set(\"SESSION_TOKEN\", responseJson.token);",
							"  }",
							"});",
							"",
							"",
							"const verifyPayment = {",
							"  url: pm.environment.get(\"HOSTNAME\") + \"/ecommerce/io/v2/payment-requests/\" + pm.environment.get(\"RPTID_NM3_DELETE\"),",
							"  method: 'GET',",
							"  header: {",
							"    'Authorization': `Bearer ${pm.environment.get(\"SESSION_TOKEN\")}`",
							"  }",
							"};",
							"",
							"pm.sendRequest(verifyPayment, (error, response) => {",
							"  if (error) {",
							"    throw error;",
							"  } else {",
							"    const responseJson = response.json();",
							"    pm.environment.set(\"PAYMENT_TOKEN\", responseJson.paymentContextCode);",
							"    pm.environment.set(\"AMOUNT\", responseJson.amount);",
							"  }",
							"});",
							"",
							"const postTransactionRequestBody = {",
							"    \"paymentNotices\": [{",
							"        \"rptId\": `${pm.environment.get(\"RPTID_NM3_DELETE\")}`,",
							"        \"amount\": `${pm.environment.get(\"AMOUNT\")}`,",
							"    }]",
							"};",
							"",
							"const postTransaction = {",
							"  url: pm.environment.get(\"HOSTNAME\") + \"/ecommerce/io/v2/transactions\",",
							"  method: 'POST',",
							"  header: {",
							"    'Content-Type': 'application/json',",
							"    'Authorization': `Bearer ${pm.environment.get(\"SESSION_TOKEN\")}`",
							"  },",
							"  body: {",
							"    mode: 'raw',",
							"    raw: JSON.stringify(postTransactionRequestBody)",
							"  }",
							"};",
							"",
							"pm.sendRequest(postTransaction, (error, response) => {",
							"  if (error) {",
							"    throw error;",
							"  } else {",
							"    const responseJson = response.json();",
							"    console.log(responseJson);",
							"    pm.environment.set(\"TRANSACTION_ID\", responseJson.transactionId);",
							"  }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{SESSION_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{HOSTNAME}}/ecommerce/io/v2/transactions/{{TRANSACTION_ID}}",
					"host": [
						"{{HOSTNAME}}"
					],
					"path": [
						"ecommerce",
						"io",
						"v2",
						"transactions",
						"{{TRANSACTION_ID}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}